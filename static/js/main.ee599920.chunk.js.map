{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","containers/CurrencyExchangeContainer/CurrencyExchangeContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","key","onClick","data-action","CurrencyExchangeContainer","compose","connect","state","currencies","dispatch","setCurrencyAmount","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeCurrencyFieldAC","setAction","CHANGE_CHANGE_ACTION","ChangeActionAC","changeCurrency","CHANGE_CURRENT_CURRENCY","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","Number","toFixed","action","Lesson1","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee599920.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\n  CHANGE_CURRENCY_FIELD_TYPE = \"CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE\",\n  CHANGE_CHANGE_ACTION = \"CurrencyExchange/CHANGE_CHANGE_ACTION\",\n  CHANGE_CURRENT_CURRENCY = \"CurrencyExchange/CHANGE_CURRENT_CURRENCY\"\n}\n\nexport type ChangeCurrencyFieldType = {\n  type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE;\n  payload: {\n    amountOfBYN: string;\n    amountOfCurrency: string;\n  };\n};\n\nexport const ChangeCurrencyFieldAC = (\n  amountOfBYN: string,\n  amountOfCurrency: string\n): ChangeCurrencyFieldType => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\n    payload: {\n      amountOfBYN,\n      amountOfCurrency\n    }\n  };\n};\n\nexport type ChangeAction = {\n  type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION;\n  payload: { isBuying: boolean };\n};\n\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\n    payload: { isBuying }\n  };\n};\n\nexport type ChangeCurrentCurrencyType = {\n  type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY;\n  payload: { currentCurrency: string };\n};\n\nexport const ChangeCurrentCurrencyAC = (\n  currentCurrency: string\n): ChangeCurrentCurrencyType => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\n    payload: { currentCurrency }\n  };\n};\n\nexport type CurrencyReducersTypes =\n  | ChangeCurrencyFieldType\n  | ChangeAction\n  | ChangeCurrentCurrencyType;\n","import React from 'react';\n\ntype CurrencyExchangePropsType = {\n  currenciesName: string[];\n  currentCurrency: string;\n  currencyRate: number;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n  changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\n  changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\n};\n\nconst CurrencyExchange: React.FunctionComponent<CurrencyExchangePropsType> = ({\n  currenciesName,\n  currentCurrency,\n  currencyRate,\n  isBuying,\n  amountOfBYN,\n  amountOfCurrency,\n  changeCurrencyField,\n  changeAction,\n  changeCurrentCurrency,\n}) => {\n  const viewCurrency = isBuying ? (\n    <React.Fragment>\n      <label>\n        You give the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      <label>\n        You give the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  );\n\n  return (\n    <div className=\"currency\">\n      <h2>Currency exchange</h2>\n      <div className=\"currency-names\">\n        <p>Current currency:</p>\n        <ul>\n          {currenciesName.map((currency: string, index: number) => {\n            return (\n              <li\n                key={`${index}-${currency}`}\n                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\n                onClick={changeCurrentCurrency}\n                data-currency={currency}\n              >\n                {currency}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"currency-action\">\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\n          Buy\n        </span>\n        <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\n          Sell\n        </span>\n      </div>\n      <div className=\"fields\">\n        <p>Currency rate: {currencyRate}</p>\n        {viewCurrency}\n      </div>\n    </div>\n  );\n};\n\nexport default CurrencyExchange;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport CurrencyExchange from \"../../components/CurrencyExchange/CurrencyExchange\";\nimport { IGlobalState } from \"../../redux/state\";\nimport { CurrencyState } from \"../../redux/currencyReducer\";\nimport { compose, Dispatch } from \"redux\";\nimport {\n  ChangeActionAC,\n  ChangeCurrencyFieldAC,\n  ChangeCurrentCurrencyAC,\n  CurrencyReducersTypes\n} from \"../../redux/actions\";\n\ninterface ICurrencyProps extends CurrencyState {\n  setCurrencyAmount: (amountOfBYN: string, amountOfCurrency: string) => void;\n  setAction: (isBuying: boolean) => void;\n  changeCurrency: (currency: string) => void;\n}\n\nconst CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\n  currencies,\n  currentCurrency,\n  isBuying,\n  amountOfBYN,\n  amountOfCurrency,\n  setCurrencyAmount,\n  setAction,\n  changeCurrency\n}) => {\n  let currencyRate: number = 0;\n  const currenciesName = currencies.map((currency) => {\n    if (currency.currencyName === currentCurrency) {\n      currencyRate = isBuying ? currency.buyRate : currency.sellRate;\n    }\n    return currency.currencyName;\n  });\n\n  const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let value = e.currentTarget.value;\n    if (!isFinite(+value)) return;\n    if (e.currentTarget.dataset.currency) {\n      const trigger: string = e.currentTarget.dataset.currency;\n      if (trigger === \"byn\") {\n        if (value === \"\") {\n          setCurrencyAmount(value, value);\n        } else {\n          setCurrencyAmount(\n            value,\n            (+Number(value).toFixed(2) / currencyRate).toFixed(2)\n          );\n        }\n      } else {\n        if (value === \"\") {\n          setCurrencyAmount(value, value);\n        } else {\n          setCurrencyAmount(\n            (+Number(value).toFixed(2) * currencyRate).toFixed(2),\n            value\n          );\n        }\n      }\n    }\n  };\n  const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\n    e.currentTarget.dataset.action === \"buy\"\n      ? setAction(true)\n      : setAction(false);\n  };\n\n  const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\n    e.currentTarget.dataset.currency &&\n      changeCurrency(e.currentTarget.dataset.currency);\n  };\n\n  return (\n    <React.Fragment>\n      <CurrencyExchange\n        currenciesName={currenciesName}\n        currentCurrency={currentCurrency}\n        currencyRate={currencyRate}\n        isBuying={isBuying}\n        amountOfBYN={amountOfBYN}\n        amountOfCurrency={amountOfCurrency}\n        changeCurrencyField={changeCurrencyField}\n        changeAction={changeAction}\n        changeCurrentCurrency={changeCurrentCurrency}\n      />\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state: IGlobalState) => {\n  return {\n    currencies: state.currency.currencies,\n    currentCurrency: state.currency.currentCurrency,\n    isBuying: state.currency.isBuying,\n    amountOfBYN: state.currency.amountOfBYN,\n    amountOfCurrency: state.currency.amountOfCurrency\n  };\n};\n// @ts-ignore\nconst mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) => {\n  return {\n    setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\n      dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\n    },\n    setAction(isBuying: boolean) {\n      dispatch(ChangeActionAC(isBuying));\n    },\n    changeCurrency(currency: string) {\n      dispatch(ChangeCurrentCurrencyAC(currency));\n    }\n  };\n};\n// @ts-ignore\nexport const CurrencyExchangeContainer = compose(\n  connect(mapStateToProps, mapDispatchToProps)\n)(CurrencyEContainer);\n","import React from \"react\";\nimport { CurrencyExchangeContainer } from \"../../containers/CurrencyExchangeContainer/CurrencyExchangeContainer\";\n\n// Redux\n// !!! RUS: https://tproger.ru/translations/redux-for-beginners/\n// !!! ENG: https://www.freecodecamp.org/news/a-quick-guide-to-redux-for-beginners-971d18c0509b/\n// !!! https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n\n// !!! https://reactdev.ru/libs/redux/basics/\n\n// Typescript generic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\n// Разбор задания: https://www.youtube.com/watch?v=sVZ3-PAcpO0&list=PLbLBXDhswD1dtWULFSobOc7JOpUaCAwB7&index=14\n\nconst Lesson1: React.FunctionComponent = () => {\n  return (\n    <React.Fragment>\n      <CurrencyExchangeContainer />\n    </React.Fragment>\n  );\n};\n\nexport default Lesson1;\n","import React from 'react';\nimport './App.css';\nimport Lesson1 from './lessons/lesson1/lesson1';\n//import './lessons/lesson2/lesson2'\nimport Lesson3 from './lessons/lesson3/Lesson3';\nimport Lesson4 from './lessons/lesson4/Lesson4';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Lesson1 />\n      {/*<Lesson3 />*/}\n      {/*<Lesson4 />*/}\n    </div>\n  );\n}\n\nexport default App;\n","import { ACTIONS_TYPE, CurrencyReducersTypes } from \"./actions\";\n\ntype CurrencyType = {\n  currencyName: string;\n  buyRate: number;\n  sellRate: number;\n};\nexport type CurrencyState = {\n  currencies: Array<CurrencyType>;\n  currentCurrency: string;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n};\n\nconst initialState: CurrencyState = {\n  currencies: [\n    {\n      currencyName: \"USD\",\n      buyRate: 2.62,\n      sellRate: 2.58\n    },\n    {\n      currencyName: \"EUR\",\n      buyRate: 3.1,\n      sellRate: 3.06\n    },\n    {\n      currencyName: \"RUR\",\n      buyRate: 0.0345,\n      sellRate: 0.0341\n    }\n  ],\n  currentCurrency: \"USD\",\n  isBuying: true,\n  amountOfBYN: \"\",\n  amountOfCurrency: \"\"\n};\n\nexport const currencyReducer = (\n  state: CurrencyState = initialState,\n  action: CurrencyReducersTypes\n): CurrencyState => {\n  // @ts-ignore\n  switch (action.type) {\n    case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: \"\",\n        amountOfCurrency: \"\"\n      };\n    case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: \"\",\n        amountOfCurrency: \"\"\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\nimport { currencyReducer } from './currencyReducer';\n\nconst reducers = combineReducers({\n  currency: currencyReducer,\n});\nexport type IGlobalState = ReturnType<typeof reducers>;\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/state';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}